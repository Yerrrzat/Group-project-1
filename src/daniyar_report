In the group project, my main task was to create and implement two important classes: Brand and Category, along with their
corresponding repositories and controllers, including BrandRepository, CategoryRepository, BrandController, and CategoryController.
I was also responsible for linking these classes to the relevant database tables, which were initially set up by Kundyz.
To ensure smooth integration throughout the application, I connected these classes to the MyApplication and Main classes.
Additionally, I was involved in debugging the code to fix issues and ensure everything ran smoothly. Lastly, to prevent any conflicts during runtime,
I dropped and recreated all the database tables, ensuring that all team members were working with the same database structure for consistency across the project.

Some definitions:

Brand: A class representing the brand entity, typically used to manage information related to products' brand names, origins,
 and other associated details.

Category: A class used to represent the category under which a product or brand falls. Categories help organize products
 and services within a system.

IBrandRepository: An interface that defines methods for performing CRUD (Create, Read, Update, Delete) operations on the
Brand table in the database. It provides an abstraction layer for database access and interaction with Brand entities.

ICategoryRepository: Similar to IBrandRepository, this interface is used for defining methods for performing CRUD operations on the Category table. It acts as an abstraction for database access concerning Category entities.

BrandRepository: A repository class that implements the IBrandRepository interface. It contains the actual logic for interacting with the Brand table in the database, such as inserting new brands, fetching existing brands, and updating or deleting brand records.

CategoryRepository: A repository class that implements the ICategoryRepository interface. It handles the CRUD operations related to Category entities in the database, managing interactions such as inserting, retrieving, or modifying categories.

IBrandController: An interface that defines methods for handling user requests related to Brand entities. It includes operations such as creating a new brand, retrieving a brand by its ID, and fetching all brands.

ICategoryController: Similar to IBrandController, this interface defines methods for managing user requests related to Category entities. It includes operations for creating, retrieving, and listing categories.

BrandController: A controller class that implements the IBrandController interface. It processes user input related to Brand entities, calling the methods from BrandRepository to interact with the Brand database.

CategoryController: A controller class that implements the ICategoryController interface. It processes user input related to Category entities, interacting with CategoryRepository to manage the Category database.

Repository: In the context of the project, a repository is a class or interface responsible for managing database operations. It encapsulates logic for interacting with the database, such as retrieving and storing data.

Controller: A controller manages user interactions in an MVC-based application, handling input, processing data, and returning results. It links the user interface with the underlying application logic and database operations.

MyApplication: The main application class responsible for launching and coordinating the program. It utilizes controllers to handle user input and interact with the model, typically representing the business logic.

Main: The entry point of the application, often containing the main method that starts the application and initiates its components.

Database Table: A structured collection of data in a database, where each table represents a specific entity or category of information, such as users, products, or brands.

CRUD Operations: CRUD stands for Create, Read, Update, and Delete, the four basic functions of persistent storage in a database. These operations are essential for maintaining the data in the system.
